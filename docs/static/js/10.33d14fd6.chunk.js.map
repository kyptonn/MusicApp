{"version":3,"sources":["components/sections/FeedbackForm.js"],"names":["captchaToken","FeedbackForm","useContext","GlobalContext","dispatch","setSnackbarMsg","React","useCallback","data","type","snippet","useState","isSending","setIsSending","formEl","useRef","useEffect","loadReCaptcha","component","ref","onSubmit","e","formData","FormData","current","name","get","email","message","preventDefault","post","captcha","axios","then","response","reset","status","catch","error","container","required","justify","style","width","maxWidth","margin","sitekey","action","verifyCallback","token","document","querySelector","remove","id","label","autoComplete","variant","fullWidth","color","multiline","rows","transform","borderRadius","marginTop","disabled"],"mappings":"8GAaIA,E,4GA4IWC,UA3IM,WACnB,MAAuBC,qBAAWC,KAAlC,yCAAWC,EAAX,KAEMC,EAAiBC,IAAMC,aAC3B,SAACC,GACCJ,EAAS,CAAEK,KAAM,iBAAkBC,QAASF,MAE9C,CAACJ,IAEH,EAAkCE,IAAMK,UAAS,GAAjD,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAASR,IAAMS,OAAO,MAyC5BT,IAAMU,WAAU,WACdC,wBAAc,8CACb,IAUH,OACE,eAAC,IAAD,CACEC,UAAU,OACVC,IAAKL,EACLM,SAvDe,SAACC,GAElBR,GAAa,GACb,IAAMS,EAAW,IAAIC,SAAST,EAAOU,SAC/BC,EAAOH,EAASI,IAAI,QACpBC,EAAQL,EAASI,IAAI,SACrBE,EAAUN,EAASI,IAAI,WAE7BL,EAAEQ,iBAEF,IAAMC,EAAO,CACXL,KAAMA,EACNE,MAAOA,EACPC,QAASA,EACTG,QAAS/B,GAGXgC,IACGF,KAAK,qCAAsCA,GAC3CG,MAAK,SAAUC,GAGdpB,EAAOU,QAAQW,QACf9B,EAAe6B,EAAS1B,KAAK4B,QAC7BvB,GAAa,MAEdwB,OAAM,SAAUC,GAEXA,EAAMJ,UACsB,MAA1BI,EAAMJ,SAASE,SACjBtB,EAAOU,QAAQW,QAEf9B,EAAe,gCAGnBQ,GAAa,OAqBf0B,WAAS,EACTC,UAAQ,EACRC,QAAQ,SACRC,MAAO,CAAEC,MAAO,MAAOC,SAAU,QAASC,OAAQ,UAPpD,UASE,cAAC,YAAD,CACEC,QAAQ,2CACRC,OAAO,cACPC,eArBiB,SAACC,GAEtBjD,EAAeiD,EACIC,SAASC,cAAc,qBAC/BC,YAmBT,cAAC,IAAD,CACEC,GAAG,uBACHC,MAAM,OACN7C,KAAK,OACLgB,KAAK,OACL8B,aAAa,OACbV,OAAO,SACPW,QAAQ,WACRC,WAAS,EACTC,MAAM,UACNlB,UAAQ,IAEV,cAAC,IAAD,CACEa,GAAG,uBACHC,MAAM,QACN7C,KAAK,QACLgB,KAAK,QACL8B,aAAa,QACbV,OAAO,SACPW,QAAQ,WACRC,WAAS,EACTC,MAAM,UACNlB,UAAQ,IAEV,cAAC,IAAD,CACEa,GAAG,uBACHC,MAAM,WACNK,WAAS,EACTC,KAAK,IACLnD,KAAK,OACLgB,KAAK,UACL8B,aAAa,WACbV,OAAO,SACPW,QAAQ,WACRC,WAAS,EACTC,MAAM,UACNlB,UAAQ,IAET5B,EACC,cAAC,IAAD,CACE8B,MAAO,CACLC,MAAO,OACPkB,UAAW,oBACXC,aAAc,SAGhB,KACJ,cAAC,IAAD,CACEpB,MAAO,CAAEqB,UAAW,QACpBP,QAAQ,WACRE,MAAM,UACNjD,KAAK,SACLuD,WAAUpD,EALZ,SAQGA,EAAY,mBAAqB","file":"static/js/10.33d14fd6.chunk.js","sourcesContent":["import React, { useContext, useCallback } from 'react';\nimport {\n  FormControl,\n  TextField,\n  Button,\n  Grid,\n  CircularProgress,\n  LinearProgress,\n} from '@material-ui/core';\nimport { loadReCaptcha, ReCaptcha } from 'react-recaptcha-v3';\nimport axios from 'axios';\nimport { GlobalContext } from '../GlobalState';\n\nlet captchaToken;\nconst FeedbackForm = () => {\n  const [{}, dispatch] = useContext(GlobalContext);\n\n  const setSnackbarMsg = React.useCallback(\n    (data) => {\n      dispatch({ type: 'setSnackbarMsg', snippet: data });\n    },\n    [dispatch]\n  );\n  const [isSending, setIsSending] = React.useState(false);\n  const formEl = React.useRef(null);\n\n  const submitForm = (e) => {\n    // set state to sending\n    setIsSending(true);\n    const formData = new FormData(formEl.current);\n    const name = formData.get('name');\n    const email = formData.get('email');\n    const message = formData.get('message');\n\n    e.preventDefault();\n\n    const post = {\n      name: name,\n      email: email,\n      message: message,\n      captcha: captchaToken,\n    };\n\n    axios\n      .post('https://xmailerr.glitch.me/contact', post)\n      .then(function (response) {\n        // console.log(response.data.status);\n        // also clear the form\n        formEl.current.reset();\n        setSnackbarMsg(response.data.status);\n        setIsSending(false);\n      })\n      .catch(function (error) {\n        // // console.log(error.response.status);\n        if (error.response) {\n          if (error.response.status === 429) {\n            formEl.current.reset();\n\n            setSnackbarMsg('We accept limited feedback!');\n          }\n        }\n        setIsSending(false);\n      });\n  };\n\n  React.useEffect(() => {\n    loadReCaptcha('6Le1toEUAAAAAITyNwqEMaz3hFAYzciSJDMomrgN');\n  }, []);\n\n  const verifyCallback = (token) => {\n    // // console.log(token);\n    captchaToken = token;\n    const captchaBox = document.querySelector('.grecaptcha-badge');\n    captchaBox.remove();\n    // remove captcha badge\n  };\n\n  return (\n    <Grid\n      component=\"form\"\n      ref={formEl}\n      onSubmit={submitForm}\n      container\n      required\n      justify=\"center\"\n      style={{ width: '90%', maxWidth: '500px', margin: '0 auto' }}\n    >\n      <ReCaptcha\n        sitekey=\"6Le1toEUAAAAAITyNwqEMaz3hFAYzciSJDMomrgN\"\n        action=\"action_name\"\n        verifyCallback={verifyCallback}\n      />\n      <TextField\n        id=\"outlined-email-input\"\n        label=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        autoComplete=\"name\"\n        margin=\"normal\"\n        variant=\"outlined\"\n        fullWidth\n        color=\"primary\"\n        required\n      />\n      <TextField\n        id=\"outlined-email-input\"\n        label=\"Email\"\n        type=\"email\"\n        name=\"email\"\n        autoComplete=\"email\"\n        margin=\"normal\"\n        variant=\"outlined\"\n        fullWidth\n        color=\"primary\"\n        required\n      />\n      <TextField\n        id=\"outlined-email-input\"\n        label=\"Feedback\"\n        multiline\n        rows=\"4\"\n        type=\"text\"\n        name=\"message\"\n        autoComplete=\"feedback\"\n        margin=\"normal\"\n        variant=\"outlined\"\n        fullWidth\n        color=\"primary\"\n        required\n      />\n      {isSending ? (\n        <LinearProgress\n          style={{\n            width: '100%',\n            transform: 'translateY(-12px)',\n            borderRadius: '2px',\n          }}\n        />\n      ) : null}\n      <Button\n        style={{ marginTop: '10px' }}\n        variant=\"outlined\"\n        color=\"primary\"\n        type=\"submit\"\n        disabled={isSending ? true : false}\n      >\n        {/* if sending is true then show circular progress */}\n        {isSending ? 'Sending Feedback' : 'Send Feedback'}\n      </Button>\n    </Grid>\n  );\n};\n\nexport default FeedbackForm;\n"],"sourceRoot":""}