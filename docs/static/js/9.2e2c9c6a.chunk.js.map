{"version":3,"sources":["components/SearchResult.js"],"names":["entities","Entities","require","XmlEntities","liVariants","open","y","opacity","transition","stiffness","velocity","closed","ulVariants","staggerChildren","delayChildren","staggerDirection","SearchResult","videos","useCycle","isOpen","setisOpen","useContext","GlobalContext","dispatch","handleClick","video","data","id","videoId","title","decode","snippet","level","channelTitle","maxThumbnail","sdThumbnail","type","React","useEffect","setTimeout","renderResult","map","div","variants","alignItems","button","onClick","className","style","width","height","marginRight","alt","src","thumbnails","high","url","primary","secondary","component","variant","color","initial","animate"],"mappings":"2OAgBMA,EAAW,IAAIC,EADJC,EAAQ,KAAiBC,aAGpCC,EAAa,CACjBC,KAAM,CACJC,EAAG,EACHC,QAAS,EACTC,WAAY,CACVF,EAAG,CAAEG,UAAW,IAAMC,UAAW,OAGrCC,OAAQ,CACNL,EAAG,GACHC,QAAS,EACTC,WAAY,CACVF,EAAG,CAAEG,UAAW,QAKhBG,EAAa,CACjBP,KAAM,CACJG,WAAY,CAAEK,gBAAiB,IAAMC,cAAe,KAEtDH,OAAQ,CACNH,WAAY,CAAEK,gBAAiB,IAAME,kBAAmB,KAmF7CC,UA/EM,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtB,EAA4BC,aAAS,GAAO,GAA5C,mBAAOC,EAAP,KAAeC,EAAf,KAEA,EAAuBC,qBAAWC,KAAlC,yCAAWC,EAAX,KAKMC,EAAc,SAACC,GAJU,IAACC,IAMP,CACrBC,GAAIF,EAAME,GAAGC,QACbC,MAAO7B,EAAS8B,OAAOL,EAAMM,QAAQF,MAAO,CAAEG,MAAO,QACrDC,aAAcjC,EAAS8B,OAAOL,EAAMM,QAAQE,aAAc,CACxDD,MAAO,QAETE,aAAa,8BAAD,OAAgCT,EAAME,GAAGC,QAAzC,sBACZO,YAAY,8BAAD,OAAgCV,EAAME,GAAGC,QAAzC,mBAZbL,EAAS,CAAEa,KAAM,yBAA0BL,QAASL,KAiBtDW,IAAMC,WAAU,WACdC,YAAW,cAAU,KAErBnB,GAAU,KACT,IAEH,IAAMoB,EAAevB,EAAOwB,KAAI,SAAChB,GAC/B,IAAQM,EAAYN,EAAZM,QAER,OACE,eAAC,IAAOW,IAAR,CAAYC,SAAUvC,EAAtB,UACE,eAAC,IAAD,CACEwC,WAAW,aACXC,QAAM,EACNC,QAAS,kBAAMtB,EAAYC,IAH7B,UAOE,cAAC,IAAD,UACE,cAAC,IAAD,CACEsB,UAAU,cACVC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,YAAa,QACrDC,IAAKrB,EAAQF,MACbwB,IAAKtB,EAAQuB,WAAWC,KAAKC,QAGjC,cAAC,IAAD,CACEC,QAASzD,EAAS8B,OAAOC,EAAQF,MAAO,CAAEG,MAAO,QACjD0B,UACE,mCACE,cAAC,IAAD,CACEC,UAAU,OACVC,QAAQ,QACRC,MAAM,cAHR,SAKG9B,EAAQE,sBAMnB,cAAC,IAAD,MA/BqCR,EAAME,GAAGC,YAoCpD,OACE,cAAC,IAAOc,IAAR,CACEC,SAAU/B,EACVkD,SAAS,EACTC,QAAS5C,EAAS,OAAS,SAH7B,SAKGqB","file":"static/js/9.2e2c9c6a.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { motion, useCycle } from 'framer-motion';\n\nimport { GlobalContext } from './GlobalState';\n\nimport '../style.css';\nimport {\n  ListItem,\n  Typography,\n  ListItemAvatar,\n  Avatar,\n  Divider,\n  ListItemText,\n} from '@material-ui/core';\n\nconst Entities = require('html-entities').XmlEntities;\nconst entities = new Entities();\n\nconst liVariants = {\n  open: {\n    y: 0,\n    opacity: 1,\n    transition: {\n      y: { stiffness: 1000, velocity: -100 },\n    },\n  },\n  closed: {\n    y: 50,\n    opacity: 0,\n    transition: {\n      y: { stiffness: 1000 },\n    },\n  },\n};\n\nconst ulVariants = {\n  open: {\n    transition: { staggerChildren: 0.07, delayChildren: 0.2 },\n  },\n  closed: {\n    transition: { staggerChildren: 0.05, staggerDirection: -1 },\n  },\n};\n\nconst SearchResult = ({ videos }) => {\n  const [isOpen, setisOpen] = useCycle(false, true);\n\n  const [{}, dispatch] = useContext(GlobalContext);\n  const setCurrentVideoSnippet = (data) => {\n    dispatch({ type: 'setCurrentVideoSnippet', snippet: data });\n  };\n\n  const handleClick = (video) => {\n    // set all the info of current clicked video in this object\n    setCurrentVideoSnippet({\n      id: video.id.videoId,\n      title: entities.decode(video.snippet.title, { level: 'xml' }),\n      channelTitle: entities.decode(video.snippet.channelTitle, {\n        level: 'xml',\n      }),\n      maxThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/maxresdefault.jpg`,\n      sdThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/sddefault.jpg`,\n      // this is the url of the max resolution of thumbnail\n    });\n  };\n\n  React.useEffect(() => {\n    setTimeout(() => {}, 100);\n    // console.log('isopen cycle', isOpen);\n    setisOpen(true);\n  }, []);\n\n  const renderResult = videos.map((video) => {\n    const { snippet } = video;\n    // console.log('render result times');\n    return (\n      <motion.div variants={liVariants} key={video.id.videoId}>\n        <ListItem\n          alignItems=\"flex-start\"\n          button\n          onClick={() => handleClick(video)}\n          // component={Link}\n          // to={{pathname: \"/play\", search:`?id=${video.id.videoId}`}}\n        >\n          <ListItemAvatar>\n            <Avatar\n              className=\"searchThumb\"\n              style={{ width: '60px', height: '60px', marginRight: '15px' }}\n              alt={snippet.title}\n              src={snippet.thumbnails.high.url}\n            />\n          </ListItemAvatar>\n          <ListItemText\n            primary={entities.decode(snippet.title, { level: 'xml' })}\n            secondary={\n              <>\n                <Typography\n                  component=\"span\"\n                  variant=\"body2\"\n                  color=\"textPrimary\"\n                >\n                  {snippet.channelTitle}\n                </Typography>\n              </>\n            }\n          />\n        </ListItem>\n        <Divider />\n      </motion.div>\n    );\n  });\n\n  return (\n    <motion.div\n      variants={ulVariants}\n      initial={false}\n      animate={isOpen ? 'open' : 'closed'}\n    >\n      {renderResult}\n    </motion.div>\n  );\n};\n\nexport default SearchResult;\n"],"sourceRoot":""}